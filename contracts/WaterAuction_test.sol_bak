pragma solidity ^0.5.0;

import "./ERC20.sol";
import "./math/SafeMath.sol";

contract WaterAuction {

    using SafeMath for uint256;

    //----------------ENUM DECLARATIONS------------------
    enum DeviceType {NONE, HVAC, Refrigerator} DeviceType dt;
    enum UserType {NGO, END_USER} UserType ut;

    uint constant MAX_LEN = 2**8;
    //ERC20 private erc20;

    constructor () public {
        balanceRegistry[msg.sender] = 50000;
    }

    //mapping of user balances
    mapping(address => uint256) balanceRegistry;
    //mapping of user id and users
    mapping(address => User) userRegistry;
    //mapping of auction id and auction objects
    mapping(bytes32 => Auction) auctionRegistry;

    //mapping of bidId and bids
    mapping(bytes32 => Bid) bidRegistry;

    //mapping auctionId -> array of bid Ids
    mapping(bytes32 => bytes32[]) auctionBidIdsRegistry;

    //mapping usageId -> device usage
    mapping(bytes32 => DeviceUsage) deviceStatsRegistry;

    //mapping auction id -> bid Ids
    mapping(bytes32 => bytes32[]) winningBidsRegistry;

    //auction Id -> object of Bid Result
    //mapping(bytes32 => BidResult) bidResults;

    //mapping from auction id to selected users by the agent
    mapping (bytes32 => mapping (address => bool)) auctionSelectedUsers;

    //mapping (bytes32 => bytes32) notesMapping;

    //event defintions
    event DeviceUsageRegistered(bytes32 indexed _usageId, bytes32 indexed _deviceId, uint256 _timestamp, uint256 _litre);
    event PledgeSuccessful(bytes32 indexed _auctionId, uint256 _totalSavedlitre, uint256 _totalPayout);

    //user struct
    struct User{
        bytes32 userId;
        Device device;
        address userAddress;
        UserType userType;
    }
    //device struct
    struct Device{
        bytes32 deviceId;
        DeviceType deviceType;
    }
    //auction struct
    struct Auction{
        bytes32 auctionId;
        uint256 totalIncentive;
        uint256 litreHourGoalSavings;
        uint256 bidStartTimestamp;
        uint256 bidEndTimestamp;
        uint256 offStartTimestamp;
        uint256 offEndTimeStamp;
    }
    //bid struct
    struct Bid {
        bytes32 bidId;
        address userAddress;
        bytes bidAmount;
        uint256 timestampFrom;
        uint256 timestampTo;
        bytes litre;
    }
    //bid result struct
    // struct BidResult{
    //     bytes32 auctionId;
    //     uint256 savedlitreHour;
    //     uint256 totalPayout;
    // }
    //device usage struct
    struct DeviceUsage {
        bytes32 usageId;
        bytes32 deviceId;
        uint256 timestamp;
        uint256 litre;
    }

    modifier onlyAdmin() {
        User memory invokingUser = userRegistry[msg.sender];
        require(invokingUser.userType == UserType.NGO, "Only NGO type of User can do this operation");
        _;
    }

    //Fuctions related to operations on onboarding
    function createUser(bytes32 _userId, UserType _userType, address _userAddress, bytes32 _deviceId, DeviceType _deviceType) public onlyAdmin{
        User memory user = User({
            userId:_userId,
            userType:_userType,
            userAddress:_userAddress,
            device : Device(_deviceId,_deviceType)});
        userRegistry[_userAddress] = user;
    }

    function createAuction(bytes32 _auctionId, uint256 _totalIncentive, uint256 _litreHourGoalSavings,
        uint256 _bidStartTimestamp,uint256 _bidEndTimestamp,uint256 _offStartTimestamp,uint256 _offEndTimeStamp, address[] memory _users) public {

        Auction memory auction = Auction({
            auctionId : _auctionId,
            totalIncentive : _totalIncentive,
            litreHourGoalSavings : _litreHourGoalSavings,
            bidStartTimestamp : _bidStartTimestamp,
            bidEndTimestamp : _bidEndTimestamp,
            offStartTimestamp : _offStartTimestamp,
            offEndTimeStamp : _offEndTimeStamp
            });
        for (uint i = 0; i<_users.length; i++) {
            auctionSelectedUsers[_auctionId][_users[i]] = true;
        }
        auctionRegistry[_auctionId] = auction;
    }

    function placeBid(bytes32 _auctionId, bytes32 _bidId, bytes memory _bidAmount,
        uint256 _timestampFrom, uint256 _timestampTo, bytes memory _litre) public {
        Auction memory auction = auctionRegistry[_auctionId];
        //check for time
        uint256 currentTimestamp = block.timestamp;

//        require((auction.bidStartTimestamp<=currentTimestamp&&auction.bidEndTimestamp>=currentTimestamp),
//            "Bid time has passed for auction");
//        require(( _timestampFrom>=auction.offStartTimestamp&&_timestampFrom<=auction.offEndTimeStamp),
//            "Off Start time should fall under auction off timestamp");
//        require(( _timestampTo>=auction.offStartTimestamp && _timestampTo<=auction.offEndTimeStamp),
//            "Off Start time should fall under auction off timestamp");
        //require(( _timestampTo-_timestampFrom > 600000),"Duration should be more than 10 minutes");
        //require(_bidAmount < 2,"Max Bid Amount is 2 tokens");

        Bid memory bid = Bid ({
            bidId : _bidId,
            userAddress : msg.sender,
            bidAmount : _bidAmount,
            timestampFrom : _timestampFrom,
            timestampTo : _timestampTo,
            litre : _litre
            });
        bidRegistry[_bidId] = bid;
        auctionBidIdsRegistry[_auctionId].push(_bidId);
    }



    function registerDeviceUsage (bytes32 _usageId, uint256 _litre) public{
        bytes32 _deviceId = userRegistry[msg.sender].device.deviceId;
        DeviceUsage memory deviceUsage = DeviceUsage ({
            deviceId : _deviceId,
            timestamp: block.timestamp,
            litre:_litre,
            usageId : _usageId
            });
        deviceStatsRegistry[_usageId] = deviceUsage;
        emit DeviceUsageRegistered(_usageId, _deviceId, block.timestamp, _litre);
    }

    function getUser(address _userAddress) public returns (bytes32, bytes32, DeviceType, address, UserType, uint256) {
        User memory user = userRegistry[_userAddress];
        //uint256 balance = erc20.getBalance(_userAddress);
        return (user.userId, user.device.deviceId, user.device.deviceType, user.userAddress, user.userType, balanceRegistry[user.userAddress]);
    }


    function getAuction(bytes32 _auctionId) public returns (bytes32, uint256, uint256, uint256, uint256, uint256, uint256) {
        Auction memory auction = auctionRegistry[_auctionId];
        return (auction.auctionId, auction.totalIncentive,
        auction.litreHourGoalSavings, auction.bidStartTimestamp,
        auction.bidEndTimestamp, auction.offStartTimestamp, auction.offEndTimeStamp);
    }

    function getAuctionBids (bytes32 _auctionId)  public returns (bytes32[] memory, bytes memory, bytes memory) {
        //check if bid duration is closed
        Auction memory auction = auctionRegistry[_auctionId];

//        require ((auction.bidStartTimestamp < block.timestamp && block.timestamp > auction.bidEndTimestamp),
//            "Bids should be fetched after bid is closed");

        bytes32[] memory bidIds = auctionBidIdsRegistry[_auctionId];
        uint256[] memory bidAmount = new uint256[](bidIds.length);
        uint256[] memory litreHour = new uint256[](bidIds.length);

        for(uint i = 0; i<bidIds.length; i++) {
            Bid memory bid = bidRegistry[bidIds[i]];
            bidIds[i] = bid.bidId;
            bidAmount[i] = bid.bidAmount;
            litreHour[i] = bid.litre;
        }
        return (bidIds, bidAmount, litreHour);

    }

    // function getDeviceUsage (bytes32 _deviceId)  public view returns (uint256[] memory, uint256[] memory) {

    //     DeviceUsage[] memory deviceUsages = deviceStatsRegistry[_deviceId];
    //     uint256[] memory timestamp = new uint256[](deviceUsages.length);
    //     uint256[] memory litre = new uint256[](deviceUsages.length);

    //     for(uint i = 0; i<deviceUsages.length; i++) {
    //         timestamp[i] = deviceUsages[i].timestamp;
    //         litre[i] = deviceUsages[i].litre;

    //     }
    //     return (timestamp, litre);
    // }
    //TODO change
    function registerWinningBids(bytes32 _auctionId, bytes32[] memory _bidIds) public {
        winningBidsRegistry[_auctionId] = _bidIds;
        // uint256 totalPayout = 0;
        // for(uint i = 0; i<_bidIds.length; i++){
        //     Bid memory bid = bidRegistry[_bidIds[i]];
        //     //erc20.transfer(bid.userAddress, bid.bidAmount);
        //     totalPayout += bid.bidAmount;
        // }
        // BidResult memory bidResult = BidResult({
        //     auctionId : _auctionId,
        //     savedlitreHour : _savedlitreHours,
        //     totalPayout : totalPayout
        // });
        // bidResults[_auctionId] = bidResult;
        //emit BidClosed(_auctionId);
    }

    function getWinningBids(bytes32 _auctionId) public returns (bytes32[] memory, bytes32[] memory, bytes[] memory, bytes[] memory) {
        bytes32[] memory bidIds = winningBidsRegistry[_auctionId];
        uint256[] memory bidAmount = new uint256[](bidIds.length);
        uint256[] memory litreHour = new uint256[](bidIds.length);
        bytes32[] memory userIds = new bytes32[](bidIds.length);

        for(uint256 i = 0; i<bidIds.length; i++) {
            Bid memory bid = bidRegistry[bidIds[i]];
            bidIds[i] = bid.bidId;
            bidAmount[i] = bid.bidAmount;
            userIds[i] = userRegistry[bid.userAddress].userId;
            litreHour[i] = bid.litre;
        }
        return (bidIds, userIds, bidAmount, litreHour);
    }



    function getParticipatingDevicesInAuctionPledge(bytes32 _auctionId) public returns (bytes32[] memory, bytes32[] memory, uint256[] memory, uint256[] memory) {
        bytes32[] memory winningBidIds = winningBidsRegistry[_auctionId];

        bytes32[] memory participatingDeviceIds = new bytes32[](winningBidIds.length);
        bytes32[] memory participatingBidIds = new bytes32[](winningBidIds.length);
        uint256[] memory timestampStart = new uint256[](winningBidIds.length);
        uint256[] memory timestampEnd = new uint256[](winningBidIds.length);

        for(uint256 i = 0; i<winningBidIds.length; i++) {
            Bid memory bid = bidRegistry[winningBidIds[i]];
            User memory user = userRegistry[bid.userAddress];
            participatingDeviceIds[i] = user.device.deviceId;
            participatingBidIds[i] = bid.bidId;
            timestampStart[i] = bid.timestampFrom;
            timestampEnd[i] = bid.timestampTo;
        }
        return (participatingDeviceIds,participatingBidIds,timestampStart,timestampEnd);
    }

//    function incentivisePledgeKeepers(bytes32 _auctionId, bytes32[] memory _bidIds, bytes32[] memory _usageIds) public {
//        uint256 totalPayout = 0;
//        uint256 totalSavings = 0;
//        for(uint i = 0; i<_bidIds.length; i++){
//            Bid memory bid = bidRegistry[_bidIds[i]];
//            balanceRegistry[msg.sender] = balanceRegistry[msg.sender].sub(bid.bidAmount);
//            balanceRegistry[bid.userAddress] = balanceRegistry[bid.userAddress].add(bid.bidAmount);
//            totalPayout += bid.bidAmount;
//        }
//        for(uint256 i = 0; i<_usageIds.length; i++){
//            DeviceUsage memory deviceUsage = deviceStatsRegistry[_usageIds[i]];
//            totalSavings += deviceUsage.litre;
//        }
//        emit PledgeSuccessful(_auctionId, totalSavings, totalPayout);
//    }



    //getter functions
    // function getUserRegistry(bytes32 _userId) public view  returns ( bytes32,address)  {
    //     return (userRegistry[_userId].userId, userRegistry[_userId].userAddress);
    // }


}
