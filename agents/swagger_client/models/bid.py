# coding: utf-8

"""
    Energy API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Bid(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bid_id': 'str',
        'auction_id': 'str',
        'user_id': 'str',
        'bid_amount': 'int',
        'watt_saving': 'int',
        'off_start_timestamp': 'int',
        'off_end_timestamp': 'int'
    }

    attribute_map = {
        'bid_id': 'bidId',
        'auction_id': 'auctionId',
        'user_id': 'userId',
        'bid_amount': 'bidAmount',
        'watt_saving': 'wattSaving',
        'off_start_timestamp': 'offStartTimestamp',
        'off_end_timestamp': 'offEndTimestamp'
    }

    def __init__(self, bid_id=None, auction_id=None, user_id=None, bid_amount=None, watt_saving=None, off_start_timestamp=None, off_end_timestamp=None):  # noqa: E501
        """Bid - a model defined in Swagger"""  # noqa: E501

        self._bid_id = None
        self._auction_id = None
        self._user_id = None
        self._bid_amount = None
        self._watt_saving = None
        self._off_start_timestamp = None
        self._off_end_timestamp = None
        self.discriminator = None

        if bid_id is not None:
            self.bid_id = bid_id
        if auction_id is not None:
            self.auction_id = auction_id
        if user_id is not None:
            self.user_id = user_id
        if bid_amount is not None:
            self.bid_amount = bid_amount
        if watt_saving is not None:
            self.watt_saving = watt_saving
        if off_start_timestamp is not None:
            self.off_start_timestamp = off_start_timestamp
        if off_end_timestamp is not None:
            self.off_end_timestamp = off_end_timestamp

    @property
    def bid_id(self):
        """Gets the bid_id of this Bid.  # noqa: E501


        :return: The bid_id of this Bid.  # noqa: E501
        :rtype: str
        """
        return self._bid_id

    @bid_id.setter
    def bid_id(self, bid_id):
        """Sets the bid_id of this Bid.


        :param bid_id: The bid_id of this Bid.  # noqa: E501
        :type: str
        """

        self._bid_id = bid_id

    @property
    def auction_id(self):
        """Gets the auction_id of this Bid.  # noqa: E501


        :return: The auction_id of this Bid.  # noqa: E501
        :rtype: str
        """
        return self._auction_id

    @auction_id.setter
    def auction_id(self, auction_id):
        """Sets the auction_id of this Bid.


        :param auction_id: The auction_id of this Bid.  # noqa: E501
        :type: str
        """

        self._auction_id = auction_id

    @property
    def user_id(self):
        """Gets the user_id of this Bid.  # noqa: E501


        :return: The user_id of this Bid.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Bid.


        :param user_id: The user_id of this Bid.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def bid_amount(self):
        """Gets the bid_amount of this Bid.  # noqa: E501


        :return: The bid_amount of this Bid.  # noqa: E501
        :rtype: int
        """
        return self._bid_amount

    @bid_amount.setter
    def bid_amount(self, bid_amount):
        """Sets the bid_amount of this Bid.


        :param bid_amount: The bid_amount of this Bid.  # noqa: E501
        :type: int
        """

        self._bid_amount = bid_amount

    @property
    def watt_saving(self):
        """Gets the watt_saving of this Bid.  # noqa: E501


        :return: The watt_saving of this Bid.  # noqa: E501
        :rtype: int
        """
        return self._watt_saving

    @watt_saving.setter
    def watt_saving(self, watt_saving):
        """Sets the watt_saving of this Bid.


        :param watt_saving: The watt_saving of this Bid.  # noqa: E501
        :type: int
        """

        self._watt_saving = watt_saving

    @property
    def off_start_timestamp(self):
        """Gets the off_start_timestamp of this Bid.  # noqa: E501


        :return: The off_start_timestamp of this Bid.  # noqa: E501
        :rtype: int
        """
        return self._off_start_timestamp

    @off_start_timestamp.setter
    def off_start_timestamp(self, off_start_timestamp):
        """Sets the off_start_timestamp of this Bid.


        :param off_start_timestamp: The off_start_timestamp of this Bid.  # noqa: E501
        :type: int
        """

        self._off_start_timestamp = off_start_timestamp

    @property
    def off_end_timestamp(self):
        """Gets the off_end_timestamp of this Bid.  # noqa: E501


        :return: The off_end_timestamp of this Bid.  # noqa: E501
        :rtype: int
        """
        return self._off_end_timestamp

    @off_end_timestamp.setter
    def off_end_timestamp(self, off_end_timestamp):
        """Sets the off_end_timestamp of this Bid.


        :param off_end_timestamp: The off_end_timestamp of this Bid.  # noqa: E501
        :type: int
        """

        self._off_end_timestamp = off_end_timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Bid, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bid):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
